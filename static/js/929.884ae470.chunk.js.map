{"version":3,"file":"static/js/929.884ae470.chunk.js","mappings":"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","sources":["components/Pagination.tsx","components/Table.tsx","components/Search.tsx","components/Modal.tsx","pages/UserListPage.tsx"],"sourcesContent":["import React from \"react\";\n\ninterface PaginationProps {\n  usersPerPage: number;\n  totalUsers: number;\n  currentPage: number;\n  onPageChange: (page: number) => void;\n}\n\nconst Pagination: React.FC<PaginationProps> = ({\n  usersPerPage,\n  totalUsers,\n  currentPage,\n  onPageChange,\n}) => {\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(totalUsers / usersPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return (\n    <nav>\n      <ul>\n        {pageNumbers.map((number) => (\n          <li key={number}>\n            <button onClick={() => onPageChange(number)}>{number}</button>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport { Pagination };\n","import React from \"react\";\nimport { User } from \"../types/User\";\n\ninterface TableProps {\n  users: User[];\n  onSort: (key: string) => void;\n  onUserClick: (user: User) => void;\n  sortConfig: { key: string; direction: string };\n  columns: string[];\n}\n\nconst Table: React.FC<TableProps> = ({\n  users,\n  onSort,\n  onUserClick,\n  sortConfig,\n  columns,\n}) => {\n  const getCellValue = (user: User, column: string) => {\n    // Handle special cases like sorting by 'Actions'\n    // for now, just a placeholder\n    if (column === \"Actions\") {\n      return \"Actions\";\n    }\n\n    // Return the lowercased value for consistent comparison\n    return String(user[column.toLowerCase() as keyof User]);\n  };\n\n  const sortedUsers = [...users].sort((a, b) => {\n    const aValue = getCellValue(a, sortConfig.key);\n    const bValue = getCellValue(b, sortConfig.key);\n\n    if (sortConfig.direction === \"asc\") {\n      return aValue.localeCompare(bValue);\n    } else if (sortConfig.direction === \"desc\") {\n      return bValue.localeCompare(aValue);\n    }\n\n    return 0;\n  });\n\n  // Generate unique IDs for each column header\n  const headerIds = columns.map((column) => `${column.toLowerCase()}-header`);\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          {columns.map((column, index) => (\n            <th key={column} id={headerIds[index]}>\n              <button onClick={() => onSort(column)}>\n                {column}{\" \"}\n                {sortConfig.key === column &&\n                  (sortConfig.direction === \"asc\" ? \"▲\" : \"▼\")}\n              </button>\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {sortedUsers.map((user, index) => (\n          <tr\n            key={user.id}\n            aria-label={`user-row-${index}`}\n            role=\"button\"\n            style={{ cursor: \"pointer\" }}\n            onClick={() => onUserClick(user)}\n          >\n            {columns.map((column) => (\n              <td key={column} headers={headerIds[index]}>\n                {getCellValue(user, column)}\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport { Table };\n","import React from \"react\";\n\ninterface SearchProps {\n  searchTerm: string;\n  onSearchChange: (searchTerm: string) => void;\n}\n\nconst Search: React.FC<SearchProps> = ({ searchTerm, onSearchChange }) => {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.target.value);\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"search\">Search by Name:</label>\n      <input\n        type=\"text\"\n        id=\"search\"\n        value={searchTerm}\n        onChange={handleChange}\n        placeholder=\"Enter name to search\"\n      />\n    </div>\n  );\n};\n\nexport { Search };\n","import React from \"react\";\nimport \"./Modal.css\";\n\nconst Modal = ({\n  isOpen,\n  onClose,\n  children,\n}: {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n}) => {\n  if (!isOpen) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal\">\n        <button className=\"close-button\" onClick={onClose}>\n          Close\n        </button>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React, { useState, useEffect } from \"react\";\nimport { Table, Pagination, Search } from \"../components\";\nimport Modal from \"../components/Modal\";\nimport { User } from \"../types/User\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst generateProfilePicture = (userId: number): string => {\n  return `https://i.pravatar.cc/150?u=${userId}`; // Using pravatar.cc as a placeholder image generator\n};\n\nconst UserListPage: React.FC = () => {\n  const navigate = useNavigate();\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [users, setUsers] = useState<User[]>([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [usersPerPage] = useState(10);\n  const [sortConfig, setSortConfig] = useState({ key: \"\", direction: \"\" });\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const response = await fetch(\n          \"https://jsonplaceholder.typicode.com/users\"\n        );\n        const data = await response.json();\n        // Enrich data with a fake \"age\" field\n        const enrichedData = data.map((user: any) => ({\n          ...user,\n          age: Math.floor(Math.random() * 50) + 18, // Generate a random age between 18 and 67\n          profilePicture: generateProfilePicture(user.id), // generate random picture URL\n        }));\n        setUsers(enrichedData);\n      } catch (error) {\n        console.error(\"Error fetching user data:\", error);\n      }\n    };\n\n    fetchUsers();\n  }, []);\n\n  // Pagination\n  const indexOfLastUser = currentPage * usersPerPage;\n  const indexOfFirstUser = indexOfLastUser - usersPerPage;\n  const currentUsers = users.slice(indexOfFirstUser, indexOfLastUser);\n\n  // Sorting\n  const sortedUsers = currentUsers.sort((a, b) => {\n    const key = sortConfig.key as keyof User;\n    if (sortConfig.direction === \"asc\") {\n      return a[key] > b[key] ? 1 : -1;\n    } else if (sortConfig.direction === \"desc\") {\n      return a[key] < b[key] ? 1 : -1;\n    }\n    return 0;\n  });\n\n  // Search\n  const filteredUsers = sortedUsers.filter((user) =>\n    user.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleSort = (key: string) => {\n    setSortConfig({\n      key,\n      direction:\n        sortConfig.key === key && sortConfig.direction === \"asc\"\n          ? \"desc\"\n          : \"asc\",\n    });\n  };\n\n  const handleUserClick = (user: User) => {\n    navigate(`/user-details/${user.id}`, { state: { user } });\n  };\n\n  return (\n    <div>\n      <h2>User List Page</h2>\n      <Search searchTerm={searchTerm} onSearchChange={setSearchTerm} />\n      <Table\n        users={filteredUsers}\n        onSort={handleSort}\n        onUserClick={handleUserClick}\n        sortConfig={sortConfig}\n        columns={[\"Name\", \"Email\", \"Age\", \"Actions\"]}\n      />\n      <Pagination\n        usersPerPage={usersPerPage}\n        totalUsers={users.length}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <>hello</>\n      </Modal>\n    </div>\n  );\n};\n\nexport default UserListPage;\n"],"names":["Pagination","_ref","usersPerPage","totalUsers","currentPage","onPageChange","pageNumbers","i","Math","ceil","push","_jsx","children","map","number","onClick","Table","users","onSort","onUserClick","sortConfig","columns","getCellValue","user","column","String","toLowerCase","sortedUsers","sort","a","b","aValue","key","bValue","direction","localeCompare","headerIds","concat","_jsxs","index","id","role","style","cursor","headers","Search","searchTerm","onSearchChange","htmlFor","type","value","onChange","e","target","placeholder","isOpen","onClose","className","UserListPage","navigate","useNavigate","isModalOpen","setIsModalOpen","useState","setUsers","setCurrentPage","setSortConfig","setSearchTerm","useEffect","async","response","fetch","enrichedData","json","age","floor","random","profilePicture","userId","error","console","fetchUsers","indexOfLastUser","indexOfFirstUser","filteredUsers","slice","filter","name","includes","state","length","Modal","_Fragment"],"sourceRoot":""}